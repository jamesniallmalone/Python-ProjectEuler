'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Created on 30 Aug 2016

@author: James
'''

class Problem12(object):
    def __init__(self):
        pass
        
    def count_factors(self, n):
        #we want to discount the factor of 1 in even numbers.
        if n % 2 == 0: n = int(n/2)
        return len([x for x in range((1), n+1) if n%x == 0])
        
    def find_triangle(self, nth_tri):
        return (nth_tri * (nth_tri+1))/2
    
    def find_triangle_index(self, limit):
        
        index = 1
        lnum, rnum = self.count_factors(index), self.count_factors(index+1)
        
        #limit is 5 or 500 given our test base
        while lnum * rnum < limit:
            index+=1
            lnum, rnum = rnum, self.count_factors(index+1)
            
        return index